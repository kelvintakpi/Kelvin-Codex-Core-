import React, { useState, useEffect, useRef } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, BarChart, Bar, PieChart, Pie, Cell, ResponsiveContainer, ScatterChart, Scatter, AreaChart, Area } from 'recharts';
import { 
  Upload, BarChart3, TrendingUp, Users, DollarSign, Activity, Download, RefreshCw, Sparkles,
  Brain, Zap, Target, Globe, Code, Palette, Database, Settings, Play, Pause, RotateCcw,
  Star, Heart, Flame, Award, Lightbulb, Rocket, Shield, Eye, Music, Camera
} from 'lucide-react';

const ComprehensiveDashboard = () => {
  const [activeSection, setActiveSection] = useState('dashboard');
  const [isAnimating, setIsAnimating] = useState(false);
  const [selectedDataset, setSelectedDataset] = useState('performance');
  const [pulseEffect, setPulseEffect] = useState(false);
  const [creativeModeActive, setCreativeModeActive] = useState(false);
  const [systemStatus, setSystemStatus] = useState('optimal');
  const canvasRef = useRef(null);
  const [particles, setParticles] = useState([]);
  const animationRef = useRef();

  // Enhanced sample datasets
  const datasets = {
    performance: [
      { name: 'Jan', value: 4000, efficiency: 85, accuracy: 92, growth: 12 },
      { name: 'Feb', value: 3200, efficiency: 88, accuracy: 94, growth: 8 },
      { name: 'Mar', value: 5500, efficiency: 91, accuracy: 96, growth: 18 },
      { name: 'Apr', value: 4800, efficiency: 87, accuracy: 93, growth: 15 },
      { name: 'May', value: 6200, efficiency: 93, accuracy: 97, growth: 22 },
      { name: 'Jun', value: 5900, efficiency: 90, accuracy: 95, growth: 19 }
    ],
    analytics: [
      { category: 'AI Processing', score: 95, trend: 'up', impact: 'high' },
      { category: 'Data Mining', score: 88, trend: 'up', impact: 'medium' },
      { category: 'Prediction', score: 92, trend: 'stable', impact: 'high' },
      { category: 'Optimization', score: 87, trend: 'up', impact: 'medium' },
      { category: 'Integration', score: 94, trend: 'up', impact: 'high' }
    ],
    creativity: [
      { type: 'Visual Design', value: 89, engagement: 156, viral_score: 4.2 },
      { type: 'Content Creation', value: 92, engagement: 234, viral_score: 4.8 },
      { type: 'Interactive Media', value: 87, engagement: 189, viral_score: 4.1 },
      { type: 'User Experience', value: 94, engagement: 267, viral_score: 4.9 },
      { type: 'Innovation', value: 96, engagement: 298, viral_score: 5.0 }
    ]
  };

  const systemMetrics = [
    { icon: Brain, label: 'AI Processing', value: '99.2%', status: 'optimal', color: 'from-blue-500 to-cyan-500' },
    { icon: Zap, label: 'System Speed', value: '847ms', status: 'fast', color: 'from-yellow-500 to-orange-500' },
    { icon: Target, label: 'Accuracy', value: '96.8%', status: 'excellent', color: 'from-green-500 to-emerald-500' },
    { icon: Globe, label: 'Connectivity', value: 'Global', status: 'active', color: 'from-purple-500 to-pink-500' }
  ];

  // Particle animation system
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const particleArray = [];
    const numberOfParticles = 50;

    for (let i = 0; i < numberOfParticles; i++) {
      particleArray.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        size: Math.random() * 3 + 1,
        speedX: Math.random() * 2 - 1,
        speedY: Math.random() * 2 - 1,
        color: `hsl(${Math.random() * 60 + 240}, 100%, 70%)`
      });
    }

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      particleArray.forEach(particle => {
        particle.x += particle.speedX;
        particle.y += particle.speedY;

        if (particle.x > canvas.width || particle.x < 0) particle.speedX *= -1;
        if (particle.y > canvas.height || particle.y < 0) particle.speedY *= -1;

        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fillStyle = particle.color;
        ctx.fill();
      });

      animationRef.current = requestAnimationFrame(animate);
    };

    animate();

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, []);

  const triggerPulse = () => {
    setPulseEffect(true);
    setTimeout(() => setPulseEffect(false), 1000);
  };

  const generateAdvancedData = () => {
    setIsAnimating(true);
    // Simulate real-time data generation
    Object.keys(datasets).forEach(key => {
      datasets[key] = datasets[key].map(item => ({
        ...item,
        value: Math.floor(Math.random() * 10000) + 1000,
        efficiency: Math.floor(Math.random() * 20) + 80,
        accuracy: Math.floor(Math.random() * 10) + 90,
        score: Math.floor(Math.random() * 20) + 80
      }));
    });
    
    setTimeout(() => setIsAnimating(false), 1500);
    triggerPulse();
  };

  const sections = [
    { id: 'dashboard', label: 'Command Center', icon: BarChart3 },
    { id: 'analytics', label: 'Deep Analytics', icon: Brain },
    { id: 'creative', label: 'Creative Studio', icon: Palette },
    { id: 'systems', label: 'System Control', icon: Settings }
  ];

  const renderDashboard = () => (
    <div className="space-y-8">
      {/* System Status */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {systemMetrics.map((metric, index) => (
          <div key={index} className={`bg-black/30 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 hover:border-cyan-400/60 transition-all duration-500 hover:scale-105 hover:shadow-2xl hover:shadow-cyan-500/25 ${pulseEffect ? 'animate-pulse' : ''}`}>
            <div className="flex items-center justify-between mb-4">
              <div className={`p-3 rounded-xl bg-gradient-to-r ${metric.color}`}>
                <metric.icon className="h-6 w-6 text-white" />
              </div>
              <div className={`h-3 w-3 rounded-full ${
                metric.status === 'optimal' ? 'bg-green-400 animate-pulse' :
                metric.status === 'fast' ? 'bg-yellow-400 animate-pulse' :
                metric.status === 'excellent' ? 'bg-blue-400 animate-pulse' :
                'bg-purple-400 animate-pulse'
              }`} />
            </div>
            <h3 className="text-sm text-gray-300 mb-2">{metric.label}</h3>
            <p className="text-2xl font-bold text-white mb-1">{metric.value}</p>
            <p className="text-xs text-cyan-400 uppercase tracking-wider">{metric.status}</p>
          </div>
        ))}
      </div>

      {/* Main Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className={`bg-black/30 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 ${isAnimating ? 'animate-bounce' : ''}`}>
          <h3 className="text-xl font-bold text-cyan-300 mb-6 flex items-center">
            <TrendingUp className="mr-2" />
            Performance Matrix
          </h3>
          <ResponsiveContainer width="100%" height={300}>
            <AreaChart data={datasets.performance}>
              <defs>
                <linearGradient id="colorValue" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#06b6d4" stopOpacity={0.8}/>
                  <stop offset="95%" stopColor="#06b6d4" stopOpacity={0.1}/>
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="name" stroke="#9CA3AF" />
              <YAxis stroke="#9CA3AF" />
              <Tooltip contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #06b6d4', borderRadius: '8px' }} />
              <Area type="monotone" dataKey="value" stroke="#06b6d4" fillOpacity={1} fill="url(#colorValue)" strokeWidth={3} />
            </AreaChart>
          </ResponsiveContainer>
        </div>

        <div className={`bg-black/30 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 ${isAnimating ? 'animate-bounce' : ''}`}>
          <h3 className="text-xl font-bold text-cyan-300 mb-6 flex items-center">
            <Target className="mr-2" />
            Efficiency Analytics
          </h3>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={datasets.performance}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="name" stroke="#9CA3AF" />
              <YAxis stroke="#9CA3AF" />
              <Tooltip contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #06b6d4', borderRadius: '8px' }} />
              <Bar dataKey="efficiency" fill="#10b981" radius={[4, 4, 0, 0]} />
              <Bar dataKey="accuracy" fill="#f59e0b" radius={[4, 4, 0, 0]} />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );

  const renderAnalytics = () => (
    <div className="space-y-8">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-purple-400 mb-4">
          Advanced Analytics Engine
        </h2>
        <p className="text-gray-300">Deep insights and predictive modeling</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2 bg-black/30 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6">
          <h3 className="text-xl font-bold text-cyan-300 mb-6">System Performance Correlation</h3>
          <ResponsiveContainer width="100%" height={350}>
            <ScatterChart data={datasets.performance}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="efficiency" stroke="#9CA3AF" />
              <YAxis dataKey="accuracy" stroke="#9CA3AF" />
              <Tooltip contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #06b6d4', borderRadius: '8px' }} />
              <Scatter dataKey="value" fill="#8b5cf6" />
            </ScatterChart>
          </ResponsiveContainer>
        </div>

        <div className="bg-black/30 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6">
          <h3 className="text-xl font-bold text-cyan-300 mb-6">AI Capabilities</h3>
          <div className="space-y-4">
            {datasets.analytics.map((item, index) => (
              <div key={index} className="bg-black/20 rounded-lg p-4">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm text-gray-300">{item.category}</span>
                  <span className={`text-xs px-2 py-1 rounded ${
                    item.trend === 'up' ? 'bg-green-500/20 text-green-400' :
                    item.trend === 'stable' ? 'bg-yellow-500/20 text-yellow-400' :
                    'bg-red-500/20 text-red-400'
                  }`}>
                    {item.trend}
                  </span>
                </div>
                <div className="flex items-center">
                  <div className="flex-1 bg-gray-700 rounded-full h-2 mr-3">
                    <div 
                      className="bg-gradient-to-r from-cyan-500 to-purple-500 h-2 rounded-full transition-all duration-1000"
                      style={{ width: `${item.score}%` }}
                    />
                  </div>
                  <span className="text-cyan-400 font-bold">{item.score}%</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  const renderCreative = () => (
    <div className="space-y-8">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-pink-400 to-purple-400 mb-4">
          Creative Intelligence Studio
        </h2>
        <button 
          onClick={() => setCreativeModeActive(!creativeModeActive)}
          className={`px-6 py-3 rounded-xl font-semibold transition-all duration-300 ${
            creativeModeActive 
              ? 'bg-gradient-to-r from-pink-500 to-purple-500 text-white shadow-lg shadow-purple-500/50' 
              : 'bg-black/30 text-gray-300 hover:text-white'
          }`}
        >
          {creativeModeActive ? 'Creative Mode: ON' : 'Activate Creative Mode'}
        </button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className={`bg-black/30 backdrop-blur-xl border border-pink-500/30 rounded-2xl p-6 ${creativeModeActive ? 'animate-pulse border-pink-400/60' : ''}`}>
          <h3 className="text-xl font-bold text-pink-300 mb-6 flex items-center">
            <Palette className="mr-2" />
            Creative Output Metrics
          </h3>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={datasets.creativity}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="type" stroke="#9CA3AF" />
              <YAxis stroke="#9CA3AF" />
              <Tooltip contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #ec4899', borderRadius: '8px' }} />
              <Line type="monotone" dataKey="value" stroke="#ec4899" strokeWidth={3} />
              <Line type="monotone" dataKey="engagement" stroke="#8b5cf6" strokeWidth={2} />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div className="bg-black/30 backdrop-blur-xl border border-pink-500/30 rounded-2xl p-6">
          <h3 className="text-xl font-bold text-pink-300 mb-6">Creative Tools</h3>
          <div className="grid grid-cols-2 gap-4">
            {[
              { icon: Camera, label: 'Visual Gen', status: 'active' },
              { icon: Music, label: 'Audio Sync', status: 'ready' },
              { icon: Code, label: 'Code Art', status: 'active' },
              { icon: Lightbulb, label: 'Ideation', status: 'processing' },
              { icon: Rocket, label: 'Deploy', status: 'ready' },
              { icon: Star, label: 'Enhance', status: 'active' }
            ].map((tool, index) => (
              <div key={index} className="bg-black/20 rounded-lg p-4 text-center hover:bg-black/30 transition-all duration-300 cursor-pointer">
                <tool.icon className="h-8 w-8 mx-auto mb-2 text-pink-400" />
                <p className="text-sm text-gray-300 mb-1">{tool.label}</p>
                <div className={`h-2 w-2 rounded-full mx-auto ${
                  tool.status === 'active' ? 'bg-green-400 animate-pulse' :
                  tool.status === 'ready' ? 'bg-yellow-400' :
                  'bg-blue-400 animate-spin'
                }`} />
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  const renderSystems = () => (
    <div className="space-y-8">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-green-400 to-blue-400 mb-4">
          System Control Center
        </h2>
        <div className="flex justify-center gap-4">
          <button 
            onClick={generateAdvancedData}
            className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 rounded-xl text-white font-semibold hover:shadow-lg hover:shadow-green-500/50 transition-all duration-300 hover:scale-105"
          >
            <RefreshCw className={`h-5 w-5 ${isAnimating ? 'animate-spin' : ''}`} />
            <span>Regenerate All Data</span>
          </button>
          <button className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl text-white font-semibold hover:shadow-lg hover:shadow-purple-500/50 transition-all duration-300 hover:scale-105">
            <Download className="h-5 w-5" />
            <span>Export Systems</span>
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="bg-black/30 backdrop-blur-xl border border-green-500/30 rounded-2xl p-6">
          <h3 className="text-xl font-bold text-green-300 mb-6 flex items-center">
            <Shield className="mr-2" />
            Security Status
          </h3>
          <div className="space-y-4">
            {[
              { name: 'Encryption', level: 99, status: 'secure' },
              { name: 'Access Control', level: 97, status: 'active' },
              { name: 'Monitoring', level: 95, status: 'online' },
              { name: 'Backup Systems', level: 100, status: 'ready' }
            ].map((item, index) => (
              <div key={index} className="bg-black/20 rounded-lg p-3">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm text-gray-300">{item.name}</span>
                  <span className="text-green-400 font-bold">{item.level}%</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-green-500 to-emerald-400 h-2 rounded-full transition-all duration-1000"
                    style={{ width: `${item.level}%` }}
                  />
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-black/30 backdrop-blur-xl border border-blue-500/30 rounded-2xl p-6">
          <h3 className="text-xl font-bold text-blue-300 mb-6 flex items-center">
            <Database className="mr-2" />
            Data Processing
          </h3>
          <div className="text-center">
            <div className="mb-6">
              <div className="text-4xl font-bold text-blue-400 mb-2">847,392</div>
              <div className="text-sm text-gray-300">Records Processed</div>
            </div>
            <div className="grid grid-cols-2 gap-4 text-center">
              <div className="bg-black/20 rounded-lg p-3">
                <div className="text-2xl font-bold text-cyan-400">2.3TB</div>
                <div className="text-xs text-gray-400">Data Volume</div>
              </div>
              <div className="bg-black/20 rounded-lg p-3">
                <div className="text-2xl font-bold text-purple-400">99.8%</div>
                <div className="text-xs text-gray-400">Accuracy</div>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-black/30 backdrop-blur-xl border border-purple-500/30 rounded-2xl p-6">
          <h3 className="text-xl font-bold text-purple-300 mb-6 flex items-center">
            <Eye className="mr-2" />
            System Monitor
          </h3>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-gray-300">CPU Usage</span>
              <span className="text-purple-400 font-bold">23%</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-gray-300">Memory</span>
              <span className="text-green-400 font-bold">67%</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-gray-300">Network</span>
              <span className="text-blue-400 font-bold">High</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-gray-300">Uptime</span>
              <span className="text-yellow-400 font-bold">99.9%</span>
            </div>
            <div className="mt-6 p-4 bg-black/20 rounded-lg">
              <div className="flex items-center justify-center">
                <div className="h-4 w-4 bg-green-400 rounded-full animate-pulse mr-3"></div>
                <span className="text-green-400 font-semibold">All Systems Operational</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-black text-white relative overflow-hidden">
      {/* Animated Background */}
      <canvas 
        ref={canvasRef} 
        className="absolute inset-0 pointer-events-none opacity-30" 
      />
      
      {/* Header */}
      <header className="relative z-10 bg-black/40 backdrop-blur-xl border-b border-cyan-500/30 sticky top-0">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-gradient-to-r from-cyan-500 to-purple-500 rounded-xl">
                <Brain className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">
                  Universal Command Center
                </h1>
                <p className="text-sm text-gray-400">All-in-One Creative Data Platform</p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <div className={`h-3 w-3 rounded-full ${systemStatus === 'optimal' ? 'bg-green-400' : 'bg-yellow-400'} animate-pulse`} />
              <span className="text-sm text-gray-300 uppercase tracking-wider">{systemStatus}</span>
            </div>
          </div>
        </div>
      </header>

      {/* Navigation */}
      <nav className="relative z-10 bg-black/20 backdrop-blur-sm border-b border-cyan-500/20">
        <div className="container mx-auto px-6">
          <div className="flex space-x-8">
            {sections.map((section) => (
              <button
                key={section.id}
                onClick={() => setActiveSection(section.id)}
                className={`flex items-center space-x-2 py-4 px-2 transition-all duration-300 ${
                  activeSection === section.id
                    ? 'border-b-2 border-cyan-400 text-cyan-400'
                    : 'text-gray-400 hover:text-white hover:scale-105'
                }`}
              >
                <section.icon className="h-5 w-5" />
                <span>{section.label}</span>
              </button>
            ))}
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="relative z-10 container mx-auto px-6 py-8">
        {activeSection === 'dashboard' && renderDashboard()}
        {activeSection === 'analytics' && renderAnalytics()}
        {activeSection === 'creative' && renderCreative()}
        {activeSection === 'systems' && renderSystems()}
      </main>

      {/* Footer */}
      <footer className="relative z-10 bg-black/40 backdrop-blur-xl border-t border-cyan-500/30 mt-16">
        <div className="container mx-auto px-6 py-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div>
              <h3 className="text-lg font-semibold text-cyan-300 mb-4">Platform Status</h3>
              <div className="space-y-2 text-sm text-gray-400">
                <div>Version: 2.0.1</div>
                <div>Last Update: Real-time</div>
                <div>Performance: Optimal</div>
              </div>
            </div>
            <div>
              <h3 className="text-lg font-semibold text-cyan-300 mb-4">Capabilities</h3>
              <div className="space-y-2 text-sm text-gray-400">
                <div>• Advanced Analytics</div>
                <div>• Creative Generation</div>
                <div>• System Integration</div>
                <div>• Real-time Processing</div>
              </div>
            </div>
            <div>
              <h3 className="text-lg font-semibold text-cyan-300 mb-4">Quick Actions</h3>
              <div className="flex flex-wrap gap-2">
                <button className="px-3 py-1 bg-cyan-600/20 text-cyan-400 rounded text-sm hover:bg-cyan-600/30 transition-colors">
                  Export Data
                </button>
                <button className="px-3 py-1 bg-purple-600/20 text-purple-400 rounded text-sm hover:bg-purple-600/30 transition-colors">
                  Generate Report
                </button>
                <button className="px-3 py-1 bg-green-600/20 text-green-400 rounded text-sm hover:bg-green-600/30 transition-colors">
                  System Check
                </button>
              </div>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default ComprehensiveDashboard;